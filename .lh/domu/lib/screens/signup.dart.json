{
    "sourceFile": "domu/lib/screens/signup.dart",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 10,
            "patches": [
                {
                    "date": 1655330695915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1655331449221,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    //redirectUser();\r\n+    redirectUser();\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n         // Here we take the value from the MyHomePage object that was created by\r\n         // the App.build method, and use it to set our appbar title.\r\n"
                },
                {
                    "date": 1655351337943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    redirectUser();\r\n+    //redirectUser();\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n         // Here we take the value from the MyHomePage object that was created by\r\n         // the App.build method, and use it to set our appbar title.\r\n"
                },
                {
                    "date": 1655352765572,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n   }\r\n \r\n   @override\r\n   Widget build(BuildContext context) {\r\n-    //redirectUser();\r\n+    redirectUser();\r\n     return Scaffold(\r\n       appBar: AppBar(\r\n         // Here we take the value from the MyHomePage object that was created by\r\n         // the App.build method, and use it to set our appbar title.\r\n"
                },
                {
                    "date": 1655442583281,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -52,9 +52,9 @@\n         .catchError((error) => print(\"Failed to add user: $error\"));\r\n \r\n     await users\r\n         .doc(auth.currentUser?.uid)\r\n-        .update({'classroom_codes': classroomCode});\r\n+        .update({'classroomCode': classroomCode});\r\n     // add classroom code to coach's user properties under \"classroom_codes\"\r\n   }\r\n \r\n   //function to decide where to direct the user. Check if user exists, then check if user is coach or not. Void return, handle redirects in function\r\n@@ -94,9 +94,9 @@\n         await users.doc(userCredential.user?.uid).set({\r\n           'name': nameController.text,\r\n           'email': emailController.text,\r\n           'identity': identity,\r\n-          'classroom_codes': [],\r\n+          'classroom_codes': \"\",\r\n         });\r\n         print(\"Student Account Created\");\r\n       } else {\r\n         //if identity is coach, then creates a classroom and adds the id to the coach's classroom codes property\r\n"
                },
                {
                    "date": 1655442599325,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,18 +94,18 @@\n         await users.doc(userCredential.user?.uid).set({\r\n           'name': nameController.text,\r\n           'email': emailController.text,\r\n           'identity': identity,\r\n-          'classroom_codes': \"\",\r\n+          'classroomCode': \"\",\r\n         });\r\n         print(\"Student Account Created\");\r\n       } else {\r\n         //if identity is coach, then creates a classroom and adds the id to the coach's classroom codes property\r\n         await users.doc(userCredential.user?.uid).set({\r\n           'name': nameController.text,\r\n           'email': emailController.text,\r\n           'identity': identity,\r\n-          'classroom_codes': []\r\n+          'classroomCode': \"\",\r\n         });\r\n         createClassroom();\r\n       }\r\n     } on FirebaseAuthException catch (e) {\r\n"
                },
                {
                    "date": 1655442710071,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,11 +58,12 @@\n   }\r\n \r\n   //function to decide where to direct the user. Check if user exists, then check if user is coach or not. Void return, handle redirects in function\r\n   Future<void> redirectUser() async {\r\n-    if (globals.user != null) {\r\n+    Map<String, dynamic>? userData = await getUserDataByID(globals.user?.uid);\r\n+    if (userData != null) {\r\n       // check identity of user\r\n-      Map<String, dynamic>? userData = await getUserDataByID(globals.user?.uid);\r\n+      \r\n       if (userData?[\"identity\"] == \"coach\") {\r\n         Navigator.push(\r\n           context,\r\n           MaterialPageRoute(builder: (context) => const HomeCoachScreen()),\r\n"
                },
                {
                    "date": 1655442716892,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     Map<String, dynamic>? userData = await getUserDataByID(globals.user?.uid);\r\n     if (userData != null) {\r\n       // check identity of user\r\n       \r\n-      if (userData?[\"identity\"] == \"coach\") {\r\n+      if (userData[\"identity\"] == \"coach\") {\r\n         Navigator.push(\r\n           context,\r\n           MaterialPageRoute(builder: (context) => const HomeCoachScreen()),\r\n         );\r\n"
                },
                {
                    "date": 1655781648152,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,11 @@\n \r\n   //function to decide where to direct the user. Check if user exists, then check if user is coach or not. Void return, handle redirects in function\r\n   Future<void> redirectUser() async {\r\n     Map<String, dynamic>? userData = await getUserDataByID(globals.user?.uid);\r\n+    debugPrint(userData);\r\n     if (userData != null) {\r\n       // check identity of user\r\n-      \r\n       if (userData[\"identity\"] == \"coach\") {\r\n         Navigator.push(\r\n           context,\r\n           MaterialPageRoute(builder: (context) => const HomeCoachScreen()),\r\n"
                },
                {
                    "date": 1655781696266,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n \r\n   //function to decide where to direct the user. Check if user exists, then check if user is coach or not. Void return, handle redirects in function\r\n   Future<void> redirectUser() async {\r\n     Map<String, dynamic>? userData = await getUserDataByID(globals.user?.uid);\r\n-    debugPrint(userData);\r\n+    debugPrint(\"UserData: $userData\");\r\n     if (userData != null) {\r\n       // check identity of user\r\n       if (userData[\"identity\"] == \"coach\") {\r\n         Navigator.push(\r\n"
                },
                {
                    "date": 1655781708494,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -62,9 +62,9 @@\n     Map<String, dynamic>? userData = await getUserDataByID(globals.user?.uid);\r\n     debugPrint(\"UserData: $userData\");\r\n     if (userData != null) {\r\n       // check identity of user\r\n-      if (userData[\"identity\"] == \"coach\") {\r\n+      if (userData[\"identity\"] == \"Coach\") {\r\n         Navigator.push(\r\n           context,\r\n           MaterialPageRoute(builder: (context) => const HomeCoachScreen()),\r\n         );\r\n"
                }
            ],
            "date": 1655330695915,
            "name": "Commit-0",
            "content": "import 'package:domu/screens/homeCoach.dart';\r\nimport 'package:domu/screens/createCoachClassroom.dart';\r\nimport 'package:firebase_auth/firebase_auth.dart';\r\nimport 'package:flutter/foundation.dart';\r\nimport 'package:flutter_signin_button/flutter_signin_button.dart';\r\nimport 'package:domu/screens/homeStudent.dart';\r\nimport 'package:domu/screens/studentJoinClassroom.dart';\r\nimport 'package:flutter/material.dart';\r\nimport '../globalVars.dart' as globals;\r\nimport '../utils.dart';\r\nimport 'package:shared_preferences/shared_preferences.dart';\r\nimport '../widgets/labeledCheckbox.dart';\r\nimport 'package:cloud_firestore/cloud_firestore.dart';\r\nimport 'dart:math';\r\n\r\nclass SignUpScreen extends StatefulWidget {\r\n  const SignUpScreen({Key? key}) : super(key: key);\r\n\r\n  @override\r\n  _SignUpScreenState createState() => _SignUpScreenState();\r\n}\r\n\r\nclass _SignUpScreenState extends State<SignUpScreen> {\r\n  bool _isSelected1 = false;\r\n  bool _isSelected2 = false;\r\n  final emailController = TextEditingController();\r\n  final passwordController = TextEditingController();\r\n  final nameController = TextEditingController();\r\n  final FirebaseAuth auth = FirebaseAuth.instance;\r\n  FirebaseFirestore firestore = FirebaseFirestore.instance;\r\n  CollectionReference users = FirebaseFirestore.instance.collection('users');\r\n\r\n  void createClassroom() async {\r\n    CollectionReference classrooms =\r\n        FirebaseFirestore.instance.collection('classrooms');\r\n\r\n    CollectionReference users = FirebaseFirestore.instance.collection('users');\r\n\r\n    //auto generate 6 dig number\r\n    var rng = Random();\r\n    var code = rng.nextInt(900000) + 100000;\r\n    String classroomCode = code.toString();\r\n\r\n    // creates classroom\r\n    await classrooms\r\n        .add({\r\n          'classroomCode':\r\n              classroomCode, // Replace with automatically generated number\r\n          'classroomName': nameController.text + 's Classroom'\r\n        })\r\n        .then((value) => print(\"Classroom Added\"))\r\n        .catchError((error) => print(\"Failed to add user: $error\"));\r\n\r\n    await users\r\n        .doc(auth.currentUser?.uid)\r\n        .update({'classroom_codes': classroomCode});\r\n    // add classroom code to coach's user properties under \"classroom_codes\"\r\n  }\r\n\r\n  //function to decide where to direct the user. Check if user exists, then check if user is coach or not. Void return, handle redirects in function\r\n  Future<void> redirectUser() async {\r\n    if (globals.user != null) {\r\n      // check identity of user\r\n      Map<String, dynamic>? userData = await getUserDataByID(globals.user?.uid);\r\n      if (userData?[\"identity\"] == \"coach\") {\r\n        Navigator.push(\r\n          context,\r\n          MaterialPageRoute(builder: (context) => const HomeCoachScreen()),\r\n        );\r\n      } else {\r\n        Navigator.push(\r\n          context,\r\n          MaterialPageRoute(builder: (context) => const HomeStudentScreen()),\r\n        );\r\n      }\r\n    }\r\n  }\r\n\r\n  Future<void> createAccount() async {\r\n    try {\r\n      UserCredential userCredential = await FirebaseAuth.instance\r\n          .createUserWithEmailAndPassword(\r\n              email: emailController.text, password: passwordController.text);\r\n\r\n      String? uid = auth.currentUser?.uid;\r\n      if (uid == null) {\r\n        throw Exception('uid Null');\r\n      }\r\n\r\n      var identity = \"Coach\";\r\n      //if identity is selected as Student, creates an account w/o classroom code\r\n      if (_isSelected2 == true) {\r\n        identity = \"Student\";\r\n        await users.doc(userCredential.user?.uid).set({\r\n          'name': nameController.text,\r\n          'email': emailController.text,\r\n          'identity': identity,\r\n          'classroom_codes': [],\r\n        });\r\n        print(\"Student Account Created\");\r\n      } else {\r\n        //if identity is coach, then creates a classroom and adds the id to the coach's classroom codes property\r\n        await users.doc(userCredential.user?.uid).set({\r\n          'name': nameController.text,\r\n          'email': emailController.text,\r\n          'identity': identity,\r\n          'classroom_codes': []\r\n        });\r\n        createClassroom();\r\n      }\r\n    } on FirebaseAuthException catch (e) {\r\n      if (e.code == 'weak-password') {\r\n        print('The password provided is too weak.');\r\n      } else if (e.code == 'email-already-in-use') {\r\n        print('The account already exists for that email.');\r\n      }\r\n    } catch (e) {\r\n      print(e);\r\n    }\r\n  }\r\n\r\n  @override\r\n  Widget build(BuildContext context) {\r\n    //redirectUser();\r\n    return Scaffold(\r\n      appBar: AppBar(\r\n        // Here we take the value from the MyHomePage object that was created by\r\n        // the App.build method, and use it to set our appbar title.\r\n        title: const Text(\"Signup Page\"),\r\n      ),\r\n      body: SingleChildScrollView(\r\n        child: Column(\r\n          children: <Widget>[\r\n            Align(\r\n              alignment: Alignment.centerLeft,\r\n              child: Container(\r\n                padding: const EdgeInsets.fromLTRB(20, 20, 20, 0),\r\n                child: const Text(\r\n                  \"Name:\",\r\n                  style: TextStyle(fontSize: 20),\r\n                  textAlign: TextAlign.left,\r\n                ),\r\n              ),\r\n            ),\r\n            Container(\r\n              padding: const EdgeInsets.all(10),\r\n              height: 100,\r\n              child: TextField(\r\n                controller: nameController,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  hintText: 'Enter your name here',\r\n                ),\r\n              ),\r\n            ),\r\n            Align(\r\n              alignment: Alignment.centerLeft,\r\n              child: Container(\r\n                padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),\r\n                child: const Text(\r\n                  \"Email:\",\r\n                  style: TextStyle(fontSize: 20),\r\n                  textAlign: TextAlign.left,\r\n                ),\r\n              ),\r\n            ),\r\n            Container(\r\n              padding: const EdgeInsets.all(10),\r\n              height: 100,\r\n              child: TextField(\r\n                controller: emailController,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  hintText: 'Enter your email',\r\n                ),\r\n              ),\r\n            ),\r\n            Container(\r\n                alignment: Alignment.centerLeft,\r\n                padding: const EdgeInsets.fromLTRB(20, 0, 20, 0),\r\n                child: const Text(\r\n                  'Password: ',\r\n                  style: TextStyle(fontSize: 20),\r\n                  textAlign: TextAlign.left,\r\n                )),\r\n            Container(\r\n              padding: const EdgeInsets.fromLTRB(10, 10, 10, 20),\r\n              child: TextField(\r\n                controller: passwordController,\r\n                decoration: const InputDecoration(\r\n                  border: OutlineInputBorder(),\r\n                  hintText: 'Enter your password here',\r\n                ),\r\n              ),\r\n            ),\r\n            Container(\r\n              padding: const EdgeInsets.fromLTRB(20, 0, 20, 10),\r\n              alignment: Alignment.centerLeft,\r\n              child: const Text(\r\n                \"Are you a Coach, or Student?\",\r\n                style: TextStyle(fontSize: 20),\r\n                textAlign: TextAlign.left,\r\n              ),\r\n            ),\r\n            LabeledCheckbox(\r\n                label: \"Coach\",\r\n                padding: const EdgeInsets.fromLTRB(20, 0, 20, 10),\r\n                value: _isSelected1,\r\n                onChanged: (bool newValue) {\r\n                  setState(() {\r\n                    _isSelected1 = newValue;\r\n                  });\r\n                }),\r\n            LabeledCheckbox(\r\n                label: \"Student\",\r\n                padding: const EdgeInsets.fromLTRB(20, 0, 20, 10),\r\n                value: _isSelected2,\r\n                onChanged: (bool newValue) {\r\n                  setState(() {\r\n                    _isSelected2 = newValue;\r\n                  });\r\n                }),\r\n            Container(\r\n                padding: const EdgeInsets.all(10),\r\n                child: TextButton(\r\n                  child: const Text(\"Create Your Account and Get In Class!\"),\r\n                  onPressed: () async {\r\n                    //Create a new firebase account here.\r\n                    await createAccount();\r\n\r\n                    // if user is a Coach, take him/her to Coach Classroom Screen, where they can see their classroom code and share with students\r\n                    if (_isSelected1 == true) {\r\n                      // createClassroom();\r\n                      Navigator.push(\r\n                        context,\r\n                        MaterialPageRoute(\r\n                            builder: (context) =>\r\n                                const CreateCoachClassroomScreen()),\r\n                      );\r\n                    } else {\r\n                      // if user is student, take them to Student Classroom Screen, where they can input and join a classroom\r\n                      Navigator.push(\r\n                        context,\r\n                        MaterialPageRoute(\r\n                            builder: (context) => const StudentJoinClassroom()),\r\n                      );\r\n                    }\r\n                  },\r\n                )),\r\n          ],\r\n        ),\r\n      ),\r\n    );\r\n  }\r\n\r\n  // }\r\n}\r\n"
        }
    ]
}